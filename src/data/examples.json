[
  {
    "id": 1,
    "title": "Hello World",
    "slug": "hello-world",
    "categoryId": 1,
    "description": "첫 번째 파이썬 프로그램",
    "code": "# 첫 번째 파이썬 프로그램\nprint(\"Hello, World!\")\nprint('안녕하세요, 파이썬!')\n\n# 여러 값을 한 번에 출력\nprint(\"Python\", \"is\", \"awesome\")\n\n# 문자열 연결\nname = \"Python\"\nprint(\"Hello, \" + name + \"!\")",
    "explanation": "print() 함수는 파이썬에서 가장 기본적인 출력 함수입니다. 문자열은 작은따옴표(') 또는 큰따옴표(\")로 감쌀 수 있으며, 쉼표로 구분하여 여러 값을 한 번에 출력할 수 있습니다.",
    "output": "Hello, World!\n안녕하세요, 파이썬!\nPython is awesome\nHello, Python!",
    "order": 1
  },
  {
    "id": 2,
    "title": "변수",
    "slug": "variables",
    "categoryId": 1,
    "description": "데이터를 저장하고 사용하는 방법",
    "code": "# 변수에 값 저장\nname = \"Alice\"\nage = 25\nheight = 165.5\nis_student = True\n\n# 변수 출력\nprint(\"이름:\", name)\nprint(\"나이:\", age)\nprint(\"키:\", height)\nprint(\"학생 여부:\", is_student)\n\n# 변수 값 변경\nage = age + 1\nprint(\"내년 나이:\", age)\n\n# 여러 변수 동시 할당\nx, y, z = 10, 20, 30\nprint(f\"x={x}, y={y}, z={z}\")",
    "explanation": "변수는 데이터를 저장하는 상자와 같습니다. 파이썬에서는 변수 타입을 미리 선언할 필요가 없고, 언제든지 값을 바꿀 수 있습니다. 변수명은 문자나 밑줄로 시작해야 하며, 숫자로 시작할 수 없습니다.",
    "output": "이름: Alice\n나이: 25\n키: 165.5\n학생 여부: True\n내년 나이: 26\nx=10, y=20, z=30",
    "order": 2
  },
  {
    "id": 3,
    "title": "숫자",
    "slug": "numbers",
    "categoryId": 2,
    "description": "정수와 실수 다루기",
    "code": "# 정수 (int)\ninteger = 42\nprint(f\"정수: {integer}\")\nprint(f\"타입: {type(integer)}\")\n\n# 실수 (float)\nfloat_num = 3.14159\nprint(f\"실수: {float_num}\")\nprint(f\"타입: {type(float_num)}\")\n\n# 기본 산술 연산\na = 10\nb = 3\nprint(f\"덧셈: {a} + {b} = {a + b}\")\nprint(f\"뺄셈: {a} - {b} = {a - b}\")\nprint(f\"곱셈: {a} * {b} = {a * b}\")\nprint(f\"나눗셈: {a} / {b} = {a / b}\")\nprint(f\"몫: {a} // {b} = {a // b}\")\nprint(f\"나머지: {a} % {b} = {a % b}\")\nprint(f\"제곱: {a} ** {b} = {a ** b}\")",
    "explanation": "파이썬에서 숫자는 정수(int)와 실수(float)로 구분됩니다. 정수는 소수점이 없는 수이고, 실수는 소수점을 포함하는 수입니다. 기본적인 사칙연산 외에도 몫(//)과 나머지(%) 연산, 제곱(**)을 지원합니다.",
    "output": "정수: 42\n타입: <class 'int'>\n실수: 3.14159\n타입: <class 'float'>\n덧셈: 10 + 3 = 13\n뺄셈: 10 - 3 = 7\n곱셈: 10 * 3 = 30\n나눗셈: 10 / 3 = 3.3333333333333335\n몫: 10 // 3 = 3\n나머지: 10 % 3 = 1\n제곱: 10 ** 3 = 1000",
    "order": 3
  },
  {
    "id": 4,
    "title": "문자열",
    "slug": "strings",
    "categoryId": 2,
    "description": "텍스트 데이터 다루기",
    "code": "# 문자열 생성\ntext1 = \"Hello, World!\"\ntext2 = '파이썬 문자열'\ntext3 = \"\"\"여러 줄\n문자열도\n가능합니다\"\"\"\n\n# 문자열 인덱싱\nword = \"Python\"\nprint(f\"첫 번째 문자: {word[0]}\")\nprint(f\"마지막 문자: {word[-1]}\")\nprint(f\"일부분: {word[2:5]}\")\n\n# 문자열 연산\nfirst = \"Hello\"\nsecond = \"World\"\ncombined = first + \", \" + second + \"!\"\nrepeated = \"Ha\" * 3\nprint(f\"연결: {combined}\")\nprint(f\"반복: {repeated}\")\n\n# 유용한 문자열 메서드\ntext = \"  Python Programming  \"\nprint(f\"길이: {len(text)}\")\nprint(f\"대문자: {text.upper()}\")\nprint(f\"소문자: {text.lower()}\")\nprint(f\"공백 제거: '{text.strip()}'\")\nprint(f\"단어 분리: {text.strip().split()}\")",
    "explanation": "문자열은 텍스트 데이터를 저장하는 자료형입니다. 인덱싱으로 특정 문자에 접근하고, 슬라이싱으로 부분 문자열을 추출할 수 있습니다. + 연산자로 문자열을 연결하고, * 연산자로 반복할 수 있습니다.",
    "output": "첫 번째 문자: P\n마지막 문자: n\n일부분: tho\n연결: Hello, World!\n반복: HaHaHa\n길이: 21\n대문자:   PYTHON PROGRAMMING  \n소문자:   python programming  \n공백 제거: 'Python Programming'\n단어 분리: ['Python', 'Programming']",
    "order": 4
  },
  {
    "id": 5,
    "title": "리스트",
    "slug": "lists",
    "categoryId": 3,
    "description": "여러 데이터를 순서대로 저장",
    "code": "# 리스트 생성\nfruits = [\"사과\", \"바나나\", \"오렌지\"]\nnumbers = [1, 2, 3, 4, 5]\nmixed = [\"Python\", 42, 3.14, True]\n\n# 리스트 접근\nprint(f\"첫 번째 과일: {fruits[0]}\")\nprint(f\"마지막 숫자: {numbers[-1]}\")\nprint(f\"일부분: {numbers[1:4]}\")\n\n# 리스트 수정 (가변)\nfruits.append(\"포도\")  # 끝에 추가\nfruits.insert(1, \"딸기\")  # 특정 위치에 삽입\nfruits.remove(\"바나나\")  # 값으로 제거\npopped = fruits.pop()  # 마지막 요소 제거하고 반환\n\nprint(f\"수정된 과일 리스트: {fruits}\")\nprint(f\"제거된 과일: {popped}\")\n\n# 리스트 연산\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\ncombined = list1 + list2\nrepeated = list1 * 2\n\nprint(f\"리스트 연결: {combined}\")\nprint(f\"리스트 반복: {repeated}\")\nprint(f\"리스트 길이: {len(combined)}\")\nprint(f\"3이 포함되어 있나요? {3 in list1}\")",
    "explanation": "리스트는 여러 데이터를 순서대로 저장하는 가변 자료형입니다. 대괄호 []로 만들고, 인덱스로 요소에 접근합니다. append(), insert(), remove(), pop() 등의 메서드로 요소를 추가하거나 제거할 수 있습니다.",
    "output": "첫 번째 과일: 사과\n마지막 숫자: 5\n일부분: [2, 3, 4]\n수정된 과일 리스트: ['사과', '딸기', '오렌지']\n제거된 과일: 포도\n리스트 연결: [1, 2, 3, 4, 5, 6]\n리스트 반복: [1, 2, 3, 1, 2, 3]\n리스트 길이: 6\n3이 포함되어 있나요? True",
    "order": 5
  },
  {
    "id": 6,
    "title": "딕셔너리",
    "slug": "dictionaries",
    "categoryId": 3,
    "description": "키-값 쌍으로 데이터 저장",
    "code": "# 딕셔너리 생성\nstudent = {\n    \"name\": \"김철수\",\n    \"age\": 20,\n    \"major\": \"컴퓨터공학\",\n    \"grades\": [\"A\", \"B+\", \"A-\"]\n}\n\n# 딕셔너리 접근\nprint(f\"이름: {student['name']}\")\nprint(f\"나이: {student.get('age')}\")\nprint(f\"전화번호: {student.get('phone', '없음')}\")  # 기본값\n\n# 딕셔너리 수정\nstudent['age'] = 21  # 값 수정\nstudent['phone'] = '010-1234-5678'  # 새 키-값 추가\ndel student['grades']  # 키-값 삭제\n\nprint(f\"수정된 학생 정보: {student}\")\n\n# 딕셔너리 메서드\nprint(f\"모든 키: {list(student.keys())}\")\nprint(f\"모든 값: {list(student.values())}\")\nprint(f\"키-값 쌍: {list(student.items())}\")\n\n# 딕셔너리 반복\nfor key, value in student.items():\n    print(f\"{key}: {value}\")\n\n# 중첩 딕셔너리\nclass_info = {\n    \"student1\": {\"name\": \"김철수\", \"score\": 95},\n    \"student2\": {\"name\": \"이영희\", \"score\": 87}\n}\nprint(f\"학생1 점수: {class_info['student1']['score']}\")",
    "explanation": "딕셔너리는 키(key)와 값(value)의 쌍으로 데이터를 저장하는 가변 자료형입니다. 중괄호 {}로 만들고, 키를 통해 값에 빠르게 접근할 수 있습니다. 키는 고유해야 하며 문자열, 숫자, 튜플 등이 가능합니다.",
    "output": "이름: 김철수\n나이: 20\n전화번호: 없음\n수정된 학생 정보: {'name': '김철수', 'age': 21, 'major': '컴퓨터공학', 'phone': '010-1234-5678'}\n모든 키: ['name', 'age', 'major', 'phone']\n모든 값: ['김철수', 21, '컴퓨터공학', '010-1234-5678']\n키-값 쌍: [('name', '김철수'), ('age', 21), ('major', '컴퓨터공학'), ('phone', '010-1234-5678')]\nname: 김철수\nage: 21\nmajor: 컴퓨터공학\nphone: 010-1234-5678\n학생1 점수: 95",
    "order": 6
  },
  {
    "id": 7,
    "title": "조건문",
    "slug": "conditionals",
    "categoryId": 4,
    "description": "조건에 따라 다른 동작 실행",
    "code": "# 기본 if문\nage = 18\nif age >= 18:\n    print(\"성인입니다\")\nelse:\n    print(\"미성년자입니다\")\n\n# if-elif-else\nscore = 85\nif score >= 90:\n    grade = \"A\"\nelif score >= 80:\n    grade = \"B\"\nelif score >= 70:\n    grade = \"C\"\nelse:\n    grade = \"F\"\nprint(f\"점수: {score}, 등급: {grade}\")\n\n# 비교 연산자\nx = 10\ny = 20\nprint(f\"{x} == {y}: {x == y}\")\nprint(f\"{x} != {y}: {x != y}\")\nprint(f\"{x} < {y}: {x < y}\")\nprint(f\"{x} > {y}: {x > y}\")\nprint(f\"{x} <= {y}: {x <= y}\")\nprint(f\"{x} >= {y}: {x >= y}\")\n\n# 논리 연산자\na = True\nb = False\nprint(f\"a and b: {a and b}\")\nprint(f\"a or b: {a or b}\")\nprint(f\"not a: {not a}\")\n\n# 실제 예제: 로그인 검증\nusername = \"admin\"\npassword = \"1234\"\n\nif username == \"admin\" and password == \"1234\":\n    print(\"로그인 성공!\")\nelse:\n    print(\"로그인 실패!\")",
    "explanation": "조건문은 특정 조건이 참인지 거짓인지에 따라 다른 코드를 실행하는 제어문입니다. if, elif, else를 사용하여 여러 조건을 체크할 수 있고, and, or, not 같은 논리 연산자로 복잡한 조건을 만들 수 있습니다.",
    "output": "성인입니다\n점수: 85, 등급: B\n10 == 20: False\n10 != 20: True\n10 < 20: True\n10 > 20: False\n10 <= 20: True\n10 >= 20: False\na and b: False\na or b: True\nnot a: False\n로그인 성공!",
    "order": 7
  },
  {
    "id": 8,
    "title": "반복문",
    "slug": "loops",
    "categoryId": 4,
    "description": "코드를 반복 실행하기",
    "code": "# for 반복문 - 리스트\nfruits = [\"사과\", \"바나나\", \"오렌지\"]\nfor fruit in fruits:\n    print(f\"과일: {fruit}\")\n\n# for 반복문 - 범위\nprint(\"\\n1부터 5까지:\")\nfor i in range(1, 6):\n    print(f\"숫자: {i}\")\n\n# for 반복문 - 인덱스와 값\nprint(\"\\n인덱스와 값:\")\nfor index, fruit in enumerate(fruits):\n    print(f\"{index}: {fruit}\")\n\n# while 반복문\nprint(\"\\nwhile 반복문:\")\ncount = 1\nwhile count <= 3:\n    print(f\"카운트: {count}\")\n    count += 1\n\n# 중첩 반복문 - 구구단\nprint(\"\\n구구단 2단:\")\nfor i in range(1, 4):\n    result = 2 * i\n    print(f\"2 x {i} = {result}\")\n\n# 리스트 컴프리헨션\nsquares = [x**2 for x in range(1, 6)]\nprint(f\"\\n제곱수 리스트: {squares}\")\n\n# break와 continue\nprint(\"\\nbreak 예제:\")\nfor i in range(1, 10):\n    if i == 5:\n        break\n    print(i)\n\nprint(\"\\ncontinue 예제:\")\nfor i in range(1, 6):\n    if i == 3:\n        continue\n    print(i)",
    "explanation": "반복문은 같은 코드를 여러 번 실행하는 제어문입니다. for문은 시퀀스(리스트, 문자열 등)의 각 요소에 대해 반복하고, while문은 조건이 참인 동안 반복합니다. break로 반복을 중단하고, continue로 다음 반복으로 건너뛸 수 있습니다.",
    "output": "과일: 사과\n과일: 바나나\n과일: 오렌지\n\n1부터 5까지:\n숫자: 1\n숫자: 2\n숫자: 3\n숫자: 4\n숫자: 5\n\n인덱스와 값:\n0: 사과\n1: 바나나\n2: 오렌지\n\nwhile 반복문:\n카운트: 1\n카운트: 2\n카운트: 3\n\n구구단 2단:\n2 x 1 = 2\n2 x 2 = 4\n2 x 3 = 6\n\n제곱수 리스트: [1, 4, 9, 16, 25]\n\nbreak 예제:\n1\n2\n3\n4\n\ncontinue 예제:\n1\n2\n4\n5",
    "order": 8
  },
  {
    "id": 9,
    "title": "함수",
    "slug": "functions",
    "categoryId": 5,
    "description": "재사용 가능한 코드 블록",
    "code": "# 기본 함수 정의\ndef greet(name):\n    return f\"안녕하세요, {name}님!\"\n\n# 함수 호출\nmessage = greet(\"파이썬\")\nprint(message)\n\n# 매개변수가 여러 개인 함수\ndef add_numbers(a, b):\n    result = a + b\n    return result\n\nsum_result = add_numbers(10, 20)\nprint(f\"10 + 20 = {sum_result}\")\n\n# 기본값 매개변수\ndef introduce(name, age=25, city=\"서울\"):\n    return f\"이름: {name}, 나이: {age}, 도시: {city}\"\n\nprint(introduce(\"김철수\"))\nprint(introduce(\"이영희\", 30))\nprint(introduce(\"박민수\", 28, \"부산\"))\n\n# 여러 값 반환\ndef get_user_info():\n    name = \"홍길동\"\n    age = 25\n    email = \"hong@example.com\"\n    return name, age, email\n\nuser_name, user_age, user_email = get_user_info()\nprint(f\"사용자: {user_name}, {user_age}세, {user_email}\")\n\n# 지역변수와 전역변수\nglobal_var = \"전역변수\"\n\ndef show_variables():\n    local_var = \"지역변수\"\n    print(f\"함수 내부: {global_var}, {local_var}\")\n\nshow_variables()\nprint(f\"함수 외부: {global_var}\")\n# print(local_var)  # 오류! 지역변수는 함수 외부에서 접근 불가\n\n# 실용적인 함수 예제\ndef calculate_area(length, width):\n    \"\"\"직사각형의 넓이를 계산하는 함수\"\"\"\n    area = length * width\n    return area\n\nrect_area = calculate_area(5, 3)\nprint(f\"직사각형 넓이: {rect_area}\")",
    "explanation": "함수는 특정 작업을 수행하는 재사용 가능한 코드 블록입니다. def 키워드로 정의하고, 매개변수를 받아 처리한 후 결과를 return으로 반환할 수 있습니다. 함수를 사용하면 코드의 중복을 줄이고 프로그램을 체계적으로 구성할 수 있습니다.",
    "output": "안녕하세요, 파이썬님!\n10 + 20 = 30\n이름: 김철수, 나이: 25, 도시: 서울\n이름: 이영희, 나이: 30, 도시: 서울\n이름: 박민수, 나이: 28, 도시: 부산\n사용자: 홍길동, 25세, hong@example.com\n함수 내부: 전역변수, 지역변수\n함수 외부: 전역변수\n직사각형 넓이: 15",
    "order": 9
  },
  {
    "id": 10,
    "title": "모듈",
    "slug": "modules",
    "categoryId": 5,
    "description": "코드를 파일로 나누어 관리",
    "code": "# 내장 모듈 import\nimport math\nimport random\nimport datetime\n\n# math 모듈 사용\nprint(f\"원주율: {math.pi}\")\nprint(f\"자연상수: {math.e}\")\nprint(f\"16의 제곱근: {math.sqrt(16)}\")\nprint(f\"3의 5제곱: {math.pow(3, 5)}\")\nprint(f\"올림(3.2): {math.ceil(3.2)}\")\nprint(f\"내림(3.8): {math.floor(3.8)}\")\n\n# random 모듈 사용\nprint(f\"\\n랜덤 정수 (1-10): {random.randint(1, 10)}\")\nprint(f\"랜덤 실수 (0-1): {random.random()}\")\n\ncolors = [\"빨강\", \"파랑\", \"노랑\", \"초록\"]\nprint(f\"랜덤 색상: {random.choice(colors)}\")\n\n# datetime 모듈 사용\nnow = datetime.datetime.now()\nprint(f\"\\n현재 시간: {now}\")\nprint(f\"현재 연도: {now.year}\")\nprint(f\"현재 월: {now.month}\")\nprint(f\"현재 일: {now.day}\")\n\n# 특정 함수만 import\nfrom math import factorial, gcd\nprint(f\"\\n5! = {factorial(5)}\")\nprint(f\"gcd(48, 18) = {gcd(48, 18)}\")\n\n# 별명으로 import\nimport math as m\nprint(f\"\\n코사인(0): {m.cos(0)}\")\nprint(f\"사인(π/2): {m.sin(m.pi/2)}\")",
    "explanation": "모듈은 관련된 함수나 클래스를 모아놓은 파이썬 파일입니다. import 키워드로 모듈을 불러와 사용할 수 있습니다. 파이썬에는 math, random, datetime 등 유용한 내장 모듈들이 있고, 필요한 함수만 선택적으로 import하거나 별명을 지정할 수도 있습니다.",
    "output": "원주율: 3.141592653589793\n자연상수: 2.718281828459045\n16의 제곱근: 4.0\n3의 5제곱: 243.0\n올림(3.2): 4\n내림(3.8): 3\n\n랜덤 정수 (1-10): 7\n랜덤 실수 (0-1): 0.8394\n랜덤 색상: 파랑\n\n현재 시간: 2025-06-28 19:45:30.123456\n현재 연도: 2025\n현재 월: 6\n현재 일: 28\n\n5! = 120\ngcd(48, 18) = 6\n\n코사인(0): 1.0\n사인(π/2): 1.0",
    "order": 10
  }
]