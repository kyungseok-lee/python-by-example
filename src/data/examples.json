[
  {
    "id": 1,
    "title": "Hello World",
    "slug": "hello-world",
    "categoryId": 1,
    "description": "파이썬의 첫 번째 프로그램입니다",
    "code": "# 기본적인 Hello World 프로그램\nprint(\"Hello, World!\")\nprint(\"안녕하세요, 파이썬!\")\n\n# 여러 줄 출력\nprint(\"파이썬으로\")\nprint(\"프로그래밍하기\")\n\n# 한 줄에 여러 값 출력\nprint(\"Hello\", \"Python\", \"World\")",
    "explanation": "print() 함수는 파이썬에서 화면에 텍스트를 출력하는 가장 기본적인 함수입니다. 문자열은 큰따옴표(\") 또는 작은따옴표(')로 감싸서 표현할 수 있습니다.",
    "output": "Hello, World!\n안녕하세요, 파이썬!\n파이썬으로\n프로그래밍하기\nHello Python World",
    "order": 1
  },
  {
    "id": 2,
    "title": "변수",
    "slug": "variables",
    "categoryId": 2,
    "description": "파이썬에서 변수를 정의하고 사용하는 방법",
    "code": "# 변수 정의\nname = \"파이썬\"\nage = 30\nheight = 175.5\nis_student = True\n\n# 변수 출력\nprint(\"이름:\", name)\nprint(\"나이:\", age)\nprint(\"키:\", height)\nprint(\"학생 여부:\", is_student)\n\n# 변수 값 변경\nage = age + 1\nprint(\"내년 나이:\", age)\n\n# 여러 변수 동시 할당\nx, y, z = 1, 2, 3\nprint(f\"x={x}, y={y}, z={z}\")",
    "explanation": "변수는 데이터를 저장하는 컨테이너입니다. 파이썬에서는 변수 타입을 미리 선언할 필요가 없습니다. 변수명은 문자, 숫자, 밑줄(_)을 사용할 수 있지만 숫자로 시작할 수 없습니다.",
    "output": "이름: 파이썬\n나이: 30\n키: 175.5\n학생 여부: True\n내년 나이: 31\nx=1, y=2, z=3",
    "order": 2
  },
  {
    "id": 3,
    "title": "숫자형",
    "slug": "numbers",
    "categoryId": 2,
    "description": "정수, 실수, 복소수 등 숫자 자료형",
    "code": "# 정수 (int)\ninteger = 42\nprint(f\"정수: {integer}, 타입: {type(integer)}\")\n\n# 실수 (float)\nfloat_num = 3.14\nprint(f\"실수: {float_num}, 타입: {type(float_num)}\")\n\n# 복소수 (complex)\ncomplex_num = 3 + 4j\nprint(f\"복소수: {complex_num}, 타입: {type(complex_num)}\")\n\n# 사칙연산\nprint(\"덧셈:\", 10 + 3)\nprint(\"뺄셈:\", 10 - 3)\nprint(\"곱셈:\", 10 * 3)\nprint(\"나눗셈:\", 10 / 3)\nprint(\"몫:\", 10 // 3)\nprint(\"나머지:\", 10 % 3)\nprint(\"제곱:\", 10 ** 3)",
    "explanation": "파이썬의 숫자형에는 정수(int), 실수(float), 복소수(complex)가 있습니다. 사칙연산과 함께 몫(//)과 나머지(%) 연산자, 제곱(**) 연산자를 사용할 수 있습니다.",
    "output": "정수: 42, 타입: <class 'int'>\n실수: 3.14, 타입: <class 'float'>\n복소수: (3+4j), 타입: <class 'complex'>\n덧셈: 13\n뺄셈: 7\n곱셈: 30\n나눗셈: 3.3333333333333335\n몫: 3\n나머지: 1\n제곱: 1000",
    "order": 3
  },
  {
    "id": 4,
    "title": "문자열",
    "slug": "strings",
    "categoryId": 2,
    "description": "문자열 자료형과 다양한 문자열 메서드",
    "code": "# 문자열 정의\nstr1 = \"안녕하세요\"\nstr2 = '파이썬입니다'\nstr3 = \"\"\"여러 줄\n문자열\n입니다\"\"\"\n\nprint(str1)\nprint(str2)\nprint(str3)\n\n# 문자열 연산\nprint(\"연결:\", str1 + \" \" + str2)\nprint(\"반복:\", \"Python\" * 3)\n\n# 문자열 메서드\ntext = \"  Hello Python World  \"\nprint(\"원본:\", repr(text))\nprint(\"대문자:\", text.upper())\nprint(\"소문자:\", text.lower())\nprint(\"공백제거:\", text.strip())\nprint(\"분할:\", text.strip().split())\nprint(\"교체:\", text.replace(\"Python\", \"Java\"))\n\n# 문자열 포매팅\nname = \"김철수\"\nage = 25\nprint(f\"이름: {name}, 나이: {age}\")\nprint(\"이름: {}, 나이: {}\".format(name, age))",
    "explanation": "문자열은 큰따옴표(\"), 작은따옴표('), 삼중따옴표(\"\"\")로 정의할 수 있습니다. 다양한 문자열 메서드를 사용하여 문자열을 조작할 수 있으며, f-string을 사용한 포매팅이 가능합니다.",
    "output": "안녕하세요\n파이썬입니다\n여러 줄\n문자열\n입니다\n연결: 안녕하세요 파이썬입니다\n반복: PythonPythonPython\n원본: '  Hello Python World  '\n대문자:   HELLO PYTHON WORLD  \n소문자:   hello python world  \n공백제거: Hello Python World\n분할: ['Hello', 'Python', 'World']\n교체:   Hello Java World  \n이름: 김철수, 나이: 25\n이름: 김철수, 나이: 25",
    "order": 4
  },
  {
    "id": 5,
    "title": "리스트",
    "slug": "lists",
    "categoryId": 2,
    "description": "순서가 있는 데이터 집합인 리스트",
    "code": "# 리스트 생성\nfruits = [\"사과\", \"바나나\", \"오렌지\"]\nnumbers = [1, 2, 3, 4, 5]\nmixed = [\"문자열\", 42, 3.14, True]\n\nprint(\"과일:\", fruits)\nprint(\"숫자:\", numbers)\nprint(\"혼합:\", mixed)\n\n# 리스트 인덱싱\nprint(\"첫 번째 과일:\", fruits[0])\nprint(\"마지막 과일:\", fruits[-1])\n\n# 리스트 슬라이싱\nprint(\"처음 두 개:\", fruits[:2])\nprint(\"마지막 두 개:\", fruits[1:])\n\n# 리스트 메서드\nfruits.append(\"포도\")\nprint(\"추가 후:\", fruits)\n\nfruits.insert(1, \"딸기\")\nprint(\"삽입 후:\", fruits)\n\nfruits.remove(\"바나나\")\nprint(\"제거 후:\", fruits)\n\n# 리스트 정렬\nnumbers.sort(reverse=True)\nprint(\"내림차순 정렬:\", numbers)\n\n# 리스트 길이와 반복\nprint(\"과일 개수:\", len(fruits))\nfor fruit in fruits:\n    print(f\"- {fruit}\")",
    "explanation": "리스트는 순서가 있는 데이터의 집합입니다. 대괄호[]로 생성하며, 인덱싱과 슬라이싱으로 접근할 수 있습니다. append(), insert(), remove() 등의 메서드로 리스트를 조작할 수 있습니다.",
    "output": "과일: ['사과', '바나나', '오렌지']\n숫자: [1, 2, 3, 4, 5]\n혼합: ['문자열', 42, 3.14, True]\n첫 번째 과일: 사과\n마지막 과일: 오렌지\n처음 두 개: ['사과', '바나나']\n마지막 두 개: ['바나나', '오렌지']\n추가 후: ['사과', '바나나', '오렌지', '포도']\n삽입 후: ['사과', '딸기', '바나나', '오렌지', '포도']\n제거 후: ['사과', '딸기', '오렌지', '포도']\n내림차순 정렬: [5, 4, 3, 2, 1]\n과일 개수: 4\n- 사과\n- 딸기\n- 오렌지\n- 포도",
    "order": 5
  },
  {
    "id": 6,
    "title": "딕셔너리",
    "slug": "dictionaries",
    "categoryId": 2,
    "description": "키-값 쌍으로 구성된 딕셔너리",
    "code": "# 딕셔너리 생성\nperson = {\n    \"이름\": \"김철수\",\n    \"나이\": 30,\n    \"직업\": \"개발자\",\n    \"취미\": [\"독서\", \"영화감상\"]\n}\n\nprint(\"사람 정보:\", person)\n\n# 딕셔너리 접근\nprint(\"이름:\", person[\"이름\"])\nprint(\"나이:\", person.get(\"나이\"))\nprint(\"키:\", person.get(\"키\", \"정보 없음\"))\n\n# 딕셔너리 수정\nperson[\"나이\"] = 31\nperson[\"거주지\"] = \"서울\"\nprint(\"수정 후:\", person)\n\n# 딕셔너리 메서드\nprint(\"키 목록:\", list(person.keys()))\nprint(\"값 목록:\", list(person.values()))\nprint(\"키-값 쌍:\", list(person.items()))\n\n# 딕셔너리 반복\nprint(\"\\n모든 정보:\")\nfor key, value in person.items():\n    print(f\"{key}: {value}\")\n\n# 딕셔너리 제거\ndel person[\"취미\"]\nprint(\"\\n취미 제거 후:\", person)",
    "explanation": "딕셔너리는 키-값 쌍으로 구성된 자료형입니다. 중괄호{}로 생성하며, 키를 통해 값에 접근합니다. keys(), values(), items() 메서드로 딕셔너리의 구성 요소에 접근할 수 있습니다.",
    "output": "사람 정보: {'이름': '김철수', '나이': 30, '직업': '개발자', '취미': ['독서', '영화감상']}\n이름: 김철수\n나이: 30\n키: 정보 없음\n수정 후: {'이름': '김철수', '나이': 31, '직업': '개발자', '취미': ['독서', '영화감상'], '거주지': '서울'}\n키 목록: ['이름', '나이', '직업', '취미', '거주지']\n값 목록: ['김철수', 31, '개발자', ['독서', '영화감상'], '서울']\n키-값 쌍: [('이름', '김철수'), ('나이', 31), ('직업', '개발자'), ('취미', ['독서', '영화감상']), ('거주지', '서울')]\n\n모든 정보:\n이름: 김철수\n나이: 31\n직업: 개발자\n취미: ['독서', '영화감상']\n거주지: 서울\n\n취미 제거 후: {'이름': '김철수', '나이': 31, '직업': '개발자', '거주지': '서울'}",
    "order": 6
  },
  {
    "id": 7,
    "title": "if문",
    "slug": "if-statements",
    "categoryId": 3,
    "description": "조건에 따라 프로그램 흐름을 제어하는 if문",
    "code": "# 기본 if문\nage = 20\n\nif age >= 18:\n    print(\"성인입니다\")\nelse:\n    print(\"미성년자입니다\")\n\n# elif 사용\nscore = 85\n\nif score >= 90:\n    grade = \"A\"\nelif score >= 80:\n    grade = \"B\"\nelif score >= 70:\n    grade = \"C\"\nelse:\n    grade = \"F\"\n\nprint(f\"점수: {score}, 학점: {grade}\")\n\n# 논리 연산자\ntemperature = 25\nis_sunny = True\n\nif temperature > 20 and is_sunny:\n    print(\"날씨가 좋습니다\")\nelif temperature > 20 or is_sunny:\n    print(\"괜찮은 날씨입니다\")\nelse:\n    print(\"날씨가 좋지 않습니다\")\n\n# in 연산자\nfruits = [\"사과\", \"바나나\", \"오렌지\"]\nfruit = \"바나나\"\n\nif fruit in fruits:\n    print(f\"{fruit}가 목록에 있습니다\")\nelse:\n    print(f\"{fruit}가 목록에 없습니다\")\n\n# 조건부 표현식 (삼항 연산자)\nnumber = 7\nresult = \"홀수\" if number % 2 == 1 else \"짝수\"\nprint(f\"{number}은 {result}입니다\")",
    "explanation": "if문은 조건에 따라 프로그램의 실행 흐름을 결정합니다. elif로 여러 조건을 체크할 수 있고, and, or, not 논리 연산자와 in 연산자를 활용할 수 있습니다.",
    "output": "성인입니다\n점수: 85, 학점: B\n날씨가 좋습니다\n바나나가 목록에 있습니다\n7은 홀수입니다",
    "order": 7
  },
  {
    "id": 8,
    "title": "for문",
    "slug": "for-loops",
    "categoryId": 3,
    "description": "반복 작업을 수행하는 for문",
    "code": "# 리스트 반복\nfruits = [\"사과\", \"바나나\", \"오렌지\"]\n\nprint(\"과일 목록:\")\nfor fruit in fruits:\n    print(f\"- {fruit}\")\n\n# range() 함수 사용\nprint(\"\\n1부터 5까지:\")\nfor i in range(1, 6):\n    print(f\"숫자: {i}\")\n\n# enumerate() 함수\nprint(\"\\n인덱스와 함께:\")\nfor index, fruit in enumerate(fruits):\n    print(f\"{index}: {fruit}\")\n\n# 딕셔너리 반복\nperson = {\"이름\": \"김철수\", \"나이\": 30, \"직업\": \"개발자\"}\n\nprint(\"\\n사람 정보:\")\nfor key, value in person.items():\n    print(f\"{key}: {value}\")\n\n# 중첩 반복문\nprint(\"\\n구구단 2단:\")\nfor i in range(1, 4):\n    for j in range(1, 4):\n        print(f\"{i} x {j} = {i*j}\")\n    print()  # 빈 줄\n\n# 리스트 컴프리헨션\nsquares = [x**2 for x in range(1, 6)]\nprint(\"제곱수:\", squares)\n\neven_numbers = [x for x in range(1, 11) if x % 2 == 0]\nprint(\"짝수:\", even_numbers)",
    "explanation": "for문은 시퀀스(리스트, 문자열 등)의 각 요소에 대해 반복 작업을 수행합니다. range(), enumerate() 함수와 함께 사용하면 더 유용하며, 리스트 컴프리헨션으로 간결하게 작성할 수 있습니다.",
    "output": "과일 목록:\n- 사과\n- 바나나\n- 오렌지\n\n1부터 5까지:\n숫자: 1\n숫자: 2\n숫자: 3\n숫자: 4\n숫자: 5\n\n인덱스와 함께:\n0: 사과\n1: 바나나\n2: 오렌지\n\n사람 정보:\n이름: 김철수\n나이: 30\n직업: 개발자\n\n구구단 2단:\n1 x 1 = 1\n1 x 2 = 2\n1 x 3 = 3\n\n2 x 1 = 2\n2 x 2 = 4\n2 x 3 = 6\n\n3 x 1 = 3\n3 x 2 = 6\n3 x 3 = 9\n\n제곱수: [1, 4, 9, 16, 25]\n짝수: [2, 4, 6, 8, 10]",
    "order": 8
  },
  {
    "id": 9,
    "title": "while문",
    "slug": "while-loops",
    "categoryId": 3,
    "description": "조건이 참인 동안 반복하는 while문",
    "code": "# 기본 while문\ncount = 1\n\nprint(\"1부터 5까지 출력:\")\nwhile count <= 5:\n    print(f\"카운트: {count}\")\n    count += 1\n\n# 무한 루프와 break\nprint(\"\\n사용자 입력 (quit 입력시 종료):\")\nwhile True:\n    user_input = input(\"입력하세요: \")\n    if user_input == \"quit\":\n        print(\"프로그램을 종료합니다.\")\n        break\n    print(f\"입력받은 값: {user_input}\")\n\n# continue 사용\nprint(\"\\n1부터 10까지 홀수만:\")\nnum = 0\nwhile num < 10:\n    num += 1\n    if num % 2 == 0:\n        continue\n    print(f\"홀수: {num}\")\n\n# while-else 구문\nprint(\"\\n숫자 찾기:\")\nnumbers = [1, 3, 5, 7, 9]\ntarget = 5\nindex = 0\n\nwhile index < len(numbers):\n    if numbers[index] == target:\n        print(f\"{target}을 인덱스 {index}에서 찾았습니다.\")\n        break\n    index += 1\nelse:\n    print(f\"{target}을 찾을 수 없습니다.\")",
    "explanation": "while문은 조건이 참인 동안 반복을 계속합니다. break로 반복을 중단하고, continue로 다음 반복으로 건너뛸 수 있습니다. while-else 구문을 사용하면 반복이 정상적으로 끝났을 때 실행할 코드를 지정할 수 있습니다.",
    "output": "1부터 5까지 출력:\n카운트: 1\n카운트: 2\n카운트: 3\n카운트: 4\n카운트: 5\n\n1부터 10까지 홀수만:\n홀수: 1\n홀수: 3\n홀수: 5\n홀수: 7\n홀수: 9\n\n숫자 찾기:\n5을 인덱스 2에서 찾았습니다.",
    "order": 9
  },
  {
    "id": 10,
    "title": "함수 정의",
    "slug": "function-definition",
    "categoryId": 5,
    "description": "함수를 정의하고 호출하는 방법",
    "code": "# 기본 함수 정의\ndef greet():\n    print(\"안녕하세요!\")\n\n# 함수 호출\ngreet()\n\n# 매개변수가 있는 함수\ndef greet_person(name):\n    print(f\"안녕하세요, {name}님!\")\n\ngreet_person(\"김철수\")\n\n# 반환값이 있는 함수\ndef add_numbers(a, b):\n    result = a + b\n    return result\n\nsum_result = add_numbers(5, 3)\nprint(f\"5 + 3 = {sum_result}\")\n\n# 기본값 매개변수\ndef introduce(name, age=25, city=\"서울\"):\n    print(f\"이름: {name}, 나이: {age}, 거주지: {city}\")\n\nintroduce(\"김철수\")\nintroduce(\"이영희\", 30)\nintroduce(\"박민수\", 28, \"부산\")\n\n# 가변 매개변수\ndef calculate_sum(*numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\nprint(f\"합계: {calculate_sum(1, 2, 3, 4, 5)}\")\n\n# 키워드 매개변수\ndef create_profile(**info):\n    print(\"프로필 정보:\")\n    for key, value in info.items():\n        print(f\"  {key}: {value}\")\n\ncreate_profile(이름=\"김철수\", 나이=30, 직업=\"개발자\")",
    "explanation": "함수는 def 키워드로 정의하며, 코드를 재사용 가능한 단위로 만듭니다. 매개변수, 기본값, 가변 매개변수(*args), 키워드 매개변수(**kwargs)를 사용할 수 있습니다.",
    "output": "안녕하세요!\n안녕하세요, 김철수님!\n5 + 3 = 8\n이름: 김철수, 나이: 25, 거주지: 서울\n이름: 이영희, 나이: 30, 거주지: 서울\n이름: 박민수, 나이: 28, 거주지: 부산\n합계: 15\n프로필 정보:\n  이름: 김철수\n  나이: 30\n  직업: 개발자",
    "order": 10
  }
]