html을 첨부해 줄께 참고해서 수정해줘

```html

<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go by Example</title>
    <link rel=stylesheet href="site.css">
  </head>
  <body>
    <div id="intro">
      <h2><a href="./">Go by Example</a></h2>
      <p>
        <a href="https://go.dev">Go</a> is an
        open source programming language designed for
        building scalable, secure and reliable software.
        Please read the
        <a href="https://go.dev/doc/tutorial/getting-started">official documentation</a>
        to learn more.
      </p>

      <p>
        <em>Go by Example</em> is a hands-on introduction
        to Go using annotated example programs. Check out
        the <a href="hello-world">first example</a> or
        browse the full list below.
      </p>

      <p>
        Unless stated otherwise, examples here assume the
        <a href="https://go.dev/doc/devel/release">latest major release Go</a>
        and may use new language features. Try to upgrade to the latest
        version if something isn't working.
      </p>

      <ul>
      
        <li><a href="hello-world">Hello World</a></li>
      
        <li><a href="values">Values</a></li>
      
        <li><a href="variables">Variables</a></li>
      
        <li><a href="constants">Constants</a></li>
      
        <li><a href="for">For</a></li>
      
        <li><a href="if-else">If/Else</a></li>
      
        <li><a href="switch">Switch</a></li>
      
        <li><a href="arrays">Arrays</a></li>
      
        <li><a href="slices">Slices</a></li>
      
        <li><a href="maps">Maps</a></li>
      
        <li><a href="functions">Functions</a></li>
      
        <li><a href="multiple-return-values">Multiple Return Values</a></li>
      
        <li><a href="variadic-functions">Variadic Functions</a></li>
      
        <li><a href="closures">Closures</a></li>
      
        <li><a href="recursion">Recursion</a></li>
      
        <li><a href="range-over-built-in-types">Range over Built-in Types</a></li>
      
        <li><a href="pointers">Pointers</a></li>
      
        <li><a href="strings-and-runes">Strings and Runes</a></li>
      
        <li><a href="structs">Structs</a></li>
      
        <li><a href="methods">Methods</a></li>
      
        <li><a href="interfaces">Interfaces</a></li>
      
        <li><a href="enums">Enums</a></li>
      
        <li><a href="struct-embedding">Struct Embedding</a></li>
      
        <li><a href="generics">Generics</a></li>
      
        <li><a href="range-over-iterators">Range over Iterators</a></li>
      
        <li><a href="errors">Errors</a></li>
      
        <li><a href="custom-errors">Custom Errors</a></li>
      
        <li><a href="goroutines">Goroutines</a></li>
      
        <li><a href="channels">Channels</a></li>
      
        <li><a href="channel-buffering">Channel Buffering</a></li>
      
        <li><a href="channel-synchronization">Channel Synchronization</a></li>
      
        <li><a href="channel-directions">Channel Directions</a></li>
      
        <li><a href="select">Select</a></li>
      
        <li><a href="timeouts">Timeouts</a></li>
      
        <li><a href="non-blocking-channel-operations">Non-Blocking Channel Operations</a></li>
      
        <li><a href="closing-channels">Closing Channels</a></li>
      
        <li><a href="range-over-channels">Range over Channels</a></li>
      
        <li><a href="timers">Timers</a></li>
      
        <li><a href="tickers">Tickers</a></li>
      
        <li><a href="worker-pools">Worker Pools</a></li>
      
        <li><a href="waitgroups">WaitGroups</a></li>
      
        <li><a href="rate-limiting">Rate Limiting</a></li>
      
        <li><a href="atomic-counters">Atomic Counters</a></li>
      
        <li><a href="mutexes">Mutexes</a></li>
      
        <li><a href="stateful-goroutines">Stateful Goroutines</a></li>
      
        <li><a href="sorting">Sorting</a></li>
      
        <li><a href="sorting-by-functions">Sorting by Functions</a></li>
      
        <li><a href="panic">Panic</a></li>
      
        <li><a href="defer">Defer</a></li>
      
        <li><a href="recover">Recover</a></li>
      
        <li><a href="string-functions">String Functions</a></li>
      
        <li><a href="string-formatting">String Formatting</a></li>
      
        <li><a href="text-templates">Text Templates</a></li>
      
        <li><a href="regular-expressions">Regular Expressions</a></li>
      
        <li><a href="json">JSON</a></li>
      
        <li><a href="xml">XML</a></li>
      
        <li><a href="time">Time</a></li>
      
        <li><a href="epoch">Epoch</a></li>
      
        <li><a href="time-formatting-parsing">Time Formatting / Parsing</a></li>
      
        <li><a href="random-numbers">Random Numbers</a></li>
      
        <li><a href="number-parsing">Number Parsing</a></li>
      
        <li><a href="url-parsing">URL Parsing</a></li>
      
        <li><a href="sha256-hashes">SHA256 Hashes</a></li>
      
        <li><a href="base64-encoding">Base64 Encoding</a></li>
      
        <li><a href="reading-files">Reading Files</a></li>
      
        <li><a href="writing-files">Writing Files</a></li>
      
        <li><a href="line-filters">Line Filters</a></li>
      
        <li><a href="file-paths">File Paths</a></li>
      
        <li><a href="directories">Directories</a></li>
      
        <li><a href="temporary-files-and-directories">Temporary Files and Directories</a></li>
      
        <li><a href="embed-directive">Embed Directive</a></li>
      
        <li><a href="testing-and-benchmarking">Testing and Benchmarking</a></li>
      
        <li><a href="command-line-arguments">Command-Line Arguments</a></li>
      
        <li><a href="command-line-flags">Command-Line Flags</a></li>
      
        <li><a href="command-line-subcommands">Command-Line Subcommands</a></li>
      
        <li><a href="environment-variables">Environment Variables</a></li>
      
        <li><a href="logging">Logging</a></li>
      
        <li><a href="http-client">HTTP Client</a></li>
      
        <li><a href="http-server">HTTP Server</a></li>
      
        <li><a href="context">Context</a></li>
      
        <li><a href="spawning-processes">Spawning Processes</a></li>
      
        <li><a href="execing-processes">Exec'ing Processes</a></li>
      
        <li><a href="signals">Signals</a></li>
      
        <li><a href="exit">Exit</a></li>
      
      </ul>

    <p class="footer">
      by <a href="https://markmcgranaghan.com">Mark McGranaghan</a> and <a href="https://eli.thegreenplace.net">Eli Bendersky</a> | <a href="https://github.com/mmcgrana/gobyexample">source</a> | <a href="https://github.com/mmcgrana/gobyexample#license">license</a>
    </p>

    </div>
  </body>
</html>

```

```css
/* CSS reset: https://meyerweb.com/eric/tools/css/reset/ */
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block;
}
body {
  line-height: 1;
}
ol, ul {
  list-style: none;
}
blockquote, q {
  quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}


/* Layout and typography */
body {
  font-family: 'Georgia', serif;
  font-size: 16px;
  line-height: 20px;
}
em {
  font-style: italic;
}
h2 {
  font-size: 32px;
  line-height: 40px;
  margin-top: 40px;
}
h2 a {
  text-decoration: none;
}
div.example {
  width: 900px;
  min-width: 900px;
  max-width: 900px;
  margin-left: auto;
  margin-right: auto;
  margin-bottom: 120px;
}
div.example table {
  margin-top: 15px;
  margin-bottom: 20px;
}
p.next {
  margin-bottom: 20px;
}
p.footer {
  font-size: 75%;
}
div#intro {
  width: 420px;
  min-width: 420px;
  max-width: 420px;
  margin-left: auto;
  margin-right: auto;
  margin-bottom: 120px;
}
div#intro p {
  padding-top: 20px;
}
div#intro ul {
  padding-top: 20px;
}
table td {
  border: 0;
  outline: 0;
}
td.docs {
  width: 420px;
  max-width: 420px;
  min-width: 420px;
  min-height: 5px;
  vertical-align: top;
  text-align: left;
}
td.docs p {
  padding-right: 5px;
  padding-top: 5px;
  padding-bottom: 15px;
}
td.code {
  width: 480px;
  max-width: 480px;
  min-width: 480px;
  padding-top: 5px;
  padding-right: 5px;
  padding-left: 5px;
  padding-bottom: 5px;
  vertical-align: top;
}
td.code.leading {
  padding-bottom: 11px;
}
pre, code {
  font-size: 14px; line-height: 18px;
  font-family: 'Menlo', 'Monaco', 'Consolas', 'Lucida Console', monospace;
}
img.copy, img.run {
  height: 16px;
  width: 16px;
  float: right
}
img.copy, img.run {
  cursor: pointer;
}
img.copy {
  margin-right: 4px;
}


/* Colors: light mode */
body {
  background-color: #ffffff;
  color: #252519;
}
td.code.empty {
  background: #ffffff;
}
a, a:visited {
  color: #261a3b;
}
p.footer {
  color: #808080;
}
p.footer a, p.footer a:visited {
  color: #808080;
}
td.code {
  background: #f0f0f0;
}

/* Syntax highlighting: light mode */
body .nx { }                 /* Name.Other: package, variable, struct, param, generic type names, etc. */
body .nf { }                 /* Name.Function: function names (def and call) */
body .o  { }                 /* Operator: :=, &, *, +, &&, <, etc. */
body .p  { }                 /* Plain: = , . : [ ( { etc. */
body .k  { color: #954121 }  /* Keyword: if, for, range, return, defer, etc.  */
body .kc { color: #954121 }  /* Keyword.Constant: nil, true, false */
body .kd { color: #954121 }  /* Keyword.Declaration: func, var, type, struct, map, chan, etc. */
body .kn { color: #954121 }  /* Keyword.Namespace: package, import */
body .nb { color: #954121 }  /* Name.Builtin: make, len, delete, append, etc. */
body .kt { color: #b00040 }  /* Keyword.Type: string, int, byte, error, etc. */
body .m  { color: #666666 }  /* Literal.Number */
body .mf { color: #666666 }  /* Literal.Number.Float */
body .mh { color: #666666 }  /* Literal.Number.Hex */
body .mi { color: #666666 }  /* Literal.Number.Integer */
body .mo { color: #666666 }  /* Literal.Number.Oct */
body .s  { color: #219161 }  /* Literal.String */
body .sc { color: #219161 }  /* Literal.String.Char */
body .gp { color: #000080 }  /* Generic.Prompt: shell prompt */
body .go { color: #808080 }  /* Generic.Output: shell output */
body .c1 { color: #808080 }  /* Comment.Single */


@media (prefers-color-scheme: dark) {
  /* Colors: dark mode */
  body {
    background-color: #1f1f1f;
    color: #dadada;
  }
  td.code.empty {
    background: #1f1f1f;
  }
  a, a:visited {
    color: #e4e4e4;
  }
  p.footer {
    color: #898e98;
  }
  p.footer a, p.footer a:visited {
    color: #898e98;
  }
  td.code {
    background: #282828;
  }

 
  /* Syntax highlighting: dark mode */
  body .nx { }                 /* Name.Other */
  body .nf { }                 /* Name.Function */
  body .o  { }                 /* Operator */
  body .p  { }                 /* Plain */
  body .k  { color: #af5a54 }  /* Keyword */
  body .kc { color: #af5a54 }  /* Keyword.Constant */
  body .kd { color: #af5a54 }  /* Keyword.Declaration */
  body .kn { color: #af5a54 }  /* Keyword.Namespace */
  body .nb { color: #af5a54 }  /* Name.Builtin */
  body .kt { color: #b64343 }  /* Keyword.Type */
  body .m  { color: #688ec8 }  /* Literal.Number */
  body .mf { color: #688ec8 }  /* Literal.Number.Float */
  body .mh { color: #688ec8 }  /* Literal.Number.Hex */
  body .mi { color: #688ec8 }  /* Literal.Number.Integer */
  body .mo { color: #688ec8 }  /* Literal.Number.Oct */
  body .s  { color: #718e72 }  /* Literal.String */
  body .sc { color: #718e72 }  /* Literal.String.Char */
  body .gp { color: #8a6ab1 }  /* Generic.Prompt */
  body .go { color: #868686 }  /* Generic.Output */
  body .c1 { color: #868686 }  /* Comment.Single */
}
```